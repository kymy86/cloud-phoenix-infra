{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template is used for setting up a single mongodb node",
    "Parameters": {
        "VPC": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "VPC-ID of your existing Virtual Private Cloud (VPC) where you want to depoy MongoDB cluster."
        },
        "MongoDBServerSecurityGroupID": {
            "Description": "ID of the MongoDB Server Access Security Group (e.g., sg-7f16e910)",
            "Type": "AWS::EC2::SecurityGroup::Id"
        },
        "MongoDBServersSecurityGroupID": {
            "Description": "ID of the MongoDB Inter-Server Communication Security Group (e.g., sg-7f16e910)",
            "Type": "AWS::EC2::SecurityGroup::Id"
        },
        "MongoDBNodeIAMProfileID": {
            "Description": "ID of the MongoDB IAM Profile",
            "Type": "String"
        },
        "NodeSubnet": {
            "Description": "Subnet Id",
            "Type": "String"
        },
        "NodeInstanceType": {
            "Description": "Amazon EC2 instance type for the MongoDB nodes.",
            "Type": "String",
            "Default": "m4.large",
            "AllowedValues": [
                "m5.large",
                "m5.xlarge",
                "m5.2xlarge",
                "m5.4xlarge",
                "m5.12xlarge",
                "m5.24xlarge",
                "c5.large",
                "c5.xlarge",
                "c5.2xlarge",
                "c5.4xlarge",
                "c5.9xlarge",
                "c5.18xlarge",
                "x1.16xlarge",
                "x1.32xlarge",
                "r4.large",
                "r4.xlarge",
                "r4.2xlarge",
                "r4.4xlarge",
                "r4.8xlarge",
                "r4.16xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge"
            ]
        },
        "ImageId": {
            "Description": "AMI ID for Instance",
            "Type": "AWS::EC2::Image::Id"
        },
        "ReplicaNodeNameTag": {
            "Description": "Instance Name",
            "Type": "String"
        },
        "NodeReplicaSetIndex": {
            "Description": "Instance Index",
            "Type": "String"
        },
        "ReplicaShardIndex": {
            "Description": "Shard Index",
            "Type": "String"
        },
        "StackName": {
            "Description": "Name of the parent stack",
            "Type": "String"
        },
        "VolumeSize": {
            "Type": "String",
            "Description": "EBS Volume Size (data) to be attached to node in GBs",
            "Default": "400"
        },
        "VolumeType": {
            "Type": "String",
            "Description": "EBS Volume Type (data) to be attached to node in GBs [io1,gp2]",
            "Default": "gp2",
            "AllowedValues": [
                "gp2",
                "io1"
            ]
        },
        "Iops": {
            "Type": "String",
            "Description": "Iops of EBS volume when io1 type is chosen. Otherwise ignored",
            "Default": "100"
        },
        "KeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Default": "home",
            "Description": "Name of an existing EC2 KeyPair. MongoDB instances will launch with this KeyPair."
        },
        "ClusterReplicaSetCount": {
            "Description": "Number of Replica Set Members. Choose 1 or 3",
            "Type": "String",
            "Default": "3",
            "AllowedValues": [
                "1",
                "3"
            ]
        },
        "MongoDBVersion": {
            "Description": "MongoDB version",
            "Type": "String",
            "Default": "4.0",
            "AllowedValues": [
                "4.0"
            ]
        },
        "MongoDBAdminUsername": {
            "Default": "admin",
            "NoEcho": "true",
            "Description": "MongoDB admin account username",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "MongoDBAppUsername": {
            "Default": "phoenix",
            "NoEcho": "true",
            "Description": "MongoDB user account username",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "MongoDBAppTestUsername": {
            "Default": "testphoenix",
            "NoEcho": "true",
            "Description": "MongoDB test user account username",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "MongoDBAdminPassword": {
            "AllowedPattern": "([A-Za-z0-9_@-]{8,32})",
            "ConstraintDescription": "Input your MongoDB database password, Min 8, Maximum of 32 characters. . Allowed characters are: [A-Za-z0-9_@-]",
            "Description": "Enter your MongoDB Database Password, Min 8, maximum of 32 characters.",
            "NoEcho": "true",
            "Type": "String"
        },
        "MongoDBAppPassword": {
            "AllowedPattern": "([A-Za-z0-9_@-]{8,32})",
            "ConstraintDescription": "Input your MongoDB database password, Min 8, Maximum of 32 characters. . Allowed characters are: [A-Za-z0-9_@-]",
            "Description": "Enter your MongoDB Database Password for user, Min 8, maximum of 32 characters.",
            "NoEcho": "true",
            "Type": "String"
        },
        "MongoDBAppTestPassword": {
            "AllowedPattern": "([A-Za-z0-9_@-]{8,32})",
            "ConstraintDescription": "Input your MongoDB database password, Min 8, Maximum of 32 characters. . Allowed characters are: [A-Za-z0-9_@-]",
            "Description": "Enter your MongoDB Database Password for test user, Min 8, maximum of 32 characters.",
            "NoEcho": "true",
            "Type": "String"
        },
        "MongoDBAppName": {
            "AllowedPattern": "([A-Za-z0-9_-]{4,32})",
            "ConstraintDescription": "Input your MongoDB database name, Min 4, Maximum of 32 characters. . Allowed characters are: [A-Za-z0-9_-]",
            "Description": "Enter your MongoDB Database name for your app, Min 4, maximum of 32 characters.",
            "NoEcho": "true",
            "Type": "String"
        },
        "MongoDBTestAppName": {
            "AllowedPattern": "([A-Za-z0-9_-]{4,32})",
            "ConstraintDescription": "Input your MongoDB Test database name, Min 4, Maximum of 32 characters. . Allowed characters are: [A-Za-z0-9_-]",
            "Description": "Enter your MongoDB Test Database name for your app, Min 4, maximum of 32 characters.",
            "NoEcho": "true",
            "Type": "String"
        },
        "BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "Type": "String",
            "ConstraintDescription": "Bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Description": "S3 bucket name for MongoDB scripts"
        }
    },
    "Resources": {
        "ReplicaNodeNetworkInterface": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "Network Interface for Mongo Node",
                "SubnetId": {
                    "Ref": "NodeSubnet"
                },
                "GroupSet": [
                    {
                        "Ref": "MongoDBServerSecurityGroupID"
                    },
                    {
                        "Ref": "MongoDBServersSecurityGroupID"
                    }
                ],
                "SourceDestCheck": true,
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            }
        },
        "ReplicaNodeInstance": {
            "Type": "AWS::EC2::Instance",
            "CreationPolicy":{
                "ResourceSignal":{
                    "Count": 1,
                    "Timeout":"PT10M"
                }
            },
            "Metadata": {
                "HostRole": "MongoDB Node",
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/tmp/mongo_pass.txt": {
                                "content": {
                                    "Ref": "MongoDBAdminPassword"
                                },
                                "mode": "000440",
                                "owner": "root",
                                "group": "root"
                            },
                            "/tmp/mongo_user_pass.txt": {
                                "content": {
                                    "Ref": "MongoDBAppPassword"
                                },
                                "mode": "000440",
                                "owner": "root",
                                "group": "root"
                            },
                            "/tmp/mongo_user_test_pass.txt": {
                                "content": {
                                    "Ref": "MongoDBAppTestPassword"
                                },
                                "mode": "000440",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "ReplicaNodeNetworkInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Ref": "ImageId"
                },
                "IamInstanceProfile": {
                    "Ref": "MongoDBNodeIAMProfileID"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "ReplicaNodeNameTag"
                        }
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": {
                            "Ref": "NodeReplicaSetIndex"
                        }
                    },
                    {
                        "Key": "ReplicaShardIndex",
                        "Value": {
                            "Ref": "ReplicaShardIndex"
                        }
                    },
                    {
                        "Key": "Snapshot",
                        "Value": "true"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": true,
                            "VolumeSize": 25,
                            "Iops": 250,
                            "Encrypted" : true
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": true,
                            "VolumeSize": 25,
                            "Iops": 200,
                            "Encrypted" : true
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "DeleteOnTermination": true,
                            "Encrypted" : true
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/usr/bin/env bash\n",
                                "/opt/aws/bin/cfn-init -v --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource ReplicaNodeInstance ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BucketName"
                                },
                                "/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BucketName"
                                },
                                "/disable-transparent-hugepages /etc/init.d/disable-transparent-hugepages\n",
                                "chmod +x /etc/init.d/disable-transparent-hugepages \n",
                                "chkconfig --add disable-transparent-hugepages \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BucketName"
                                },
                                "/init-replica.sh init.sh\n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BucketName"
                                },
                                "/signal-final-status.sh signal-final-status.sh\n",
                                "chmod +x signal-final-status.sh \n",
                                "chmod +x init.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export CFN_STACK=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export REGION=",
                                            {
                                                "Ref": "AWS::Region"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MONGODB_ADMIN_USER=",
                                            {
                                                "Ref": "MongoDBAdminUsername"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MONGODB_APP_USER=",
                                            {
                                                "Ref": "MongoDBAppUsername"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MONGODB_APP_TEST_USER=",
                                            {
                                                "Ref": "MongoDBAppTestUsername"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MONGODB_DB_APP_NAME=",
                                            {
                                                "Ref": "MongoDBAppName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MONGODB_DB_TEST_APP_NAME=",
                                            {
                                                "Ref": "MongoDBTestAppName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "AWS_AVAIL_ZONE=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)\n",
                                "AWS_REGION=${AWS_AVAIL_ZONE::-1}\n",
                                "AWS_INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n",
                                "VOLUME_IDS=$(aws ec2 describe-instances --region $AWS_REGION --instance-id $AWS_INSTANCE_ID --output text --query Reservations[0].Instances[0].BlockDeviceMappings[].Ebs.VolumeId)\n",
                                "aws ec2 create-tags --resources $VOLUME_IDS --region $AWS_REGION --tags Key=Snapshot,Value=true\n",
                                "mkdir -p /mongo_auth \n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "/home/ec2-user/mongodb/signal-final-status.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        }
    },
    "Outputs": {
        "NodePrivateIp": {
            "Value": {
                "Fn::GetAtt": [
                    "ReplicaNodeInstance",
                    "PrivateIp"
                ]
            },
            "Description": "Private IP Address of Node Instance"
        },
        "NodeInstanceID" : {
            "Description": "The Instance ID",
            "Value" : { "Ref": "ReplicaNodeInstance" }
        },
        "NodeNameTag": {
            "Description": "Node Name Tag",
            "Value" : { "Ref": "ReplicaNodeNameTag"}
        }
    }
}